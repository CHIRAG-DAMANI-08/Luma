generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  clerkId        String         @unique
  email          String         @unique
  name           String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  lastLoginAt    DateTime?
  journalEntries JournalEntry[]
  Post           Post[]
  Vote           Vote[]
  chatSessions   ChatSession[]
  messages       Message[]
  moodEntries    MoodEntry[]
  motivations    Motivation[]
  profile        Profile?
  activities     UserActivity[]

  @@map("users")
}

model Profile {
  id                 String   @id @default(cuid())
  userId             String   @unique
  nickname           String?
  pronouns           String?
  preferredLanguage  String   @default("en")
  timezone           String   @default("UTC")
  medicalConditions  String?
  currentMedications String?
  therapyExperience  String?
  comfortLevel       Int      @default(3)
  goals              String?
  checkInFrequency   String   @default("few_times_week")
  dataSharingEnabled Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model ChatSession {
  id        String    @id @default(cuid())
  userId    String
  title     String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("chat_sessions")
}

model Message {
  id             String         @id @default(cuid())
  sessionId      String
  userId         String
  content        String
  role           String
  metadata       Json?
  createdAt      DateTime       @default(now())
  session        ChatSession    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  journalEntries JournalEntry[] @relation("JournalEntryToMessage")

  @@index([sessionId])
  @@index([userId])
  @@map("messages")
}

model MoodEntry {
  id        String   @id @default(cuid())
  userId    String
  mood      String
  notes     String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, createdAt])
  @@map("mood_entries")
}

model UserActivity {
  id           String   @id @default(cuid())
  userId       String
  activityType String
  metadata     Json?
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([activityType])
  @@map("user_activities")
}

model JournalEntry {
  id           String    @id @default(uuid())
  userId       String
  title        String?
  content      String
  tags         String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  notionPageId String?
  lastSyncedAt DateTime?
  syncNeeded   Boolean?  @default(false)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Message      Message[] @relation("JournalEntryToMessage")

  @@index([userId])
  @@index([userId, createdAt])
}

model Motivation {
  id         String   @id @default(cuid())
  userId     String
  senderName String
  note       String?
  goalText   String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("motivations")
}

model Post {
  id                String   @id
  content           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  authorId          String
  anonymousUsername String
  users             User     @relation(fields: [authorId], references: [id])
  Vote              Vote[]
}

model Vote {
  id     String   @id
  postId String
  userId String
  type   VoteType
  Post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  users  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
